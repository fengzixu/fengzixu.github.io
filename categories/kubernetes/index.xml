<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on Littledriver&#39;s Blog</title>
    <link>https://littledriver.me/categories/kubernetes/</link>
    <description>Recent content in kubernetes on Littledriver&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sat, 15 Aug 2020 16:33:20 +0900</lastBuildDate><atom:link href="https://littledriver.me/categories/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How Kubernetes Deletes A Pod Gracefully</title>
      <link>https://littledriver.me/post/how-kubernetes-deletes-a-reource-object/</link>
      <pubDate>Sat, 15 Aug 2020 16:33:20 +0900</pubDate>
      
      <guid>https://littledriver.me/post/how-kubernetes-deletes-a-reource-object/</guid>
      <description>
        
          
            This blog will introduce the graceful deletion proceess of pod in source code level. It maybe little bit complicated. If you just want to know the process in high level, you can reference the official document
 Hey! My pod was stuck in Terminating state During my on-call time, some users ask for my help with their pods that cannot be deleted successfully in the Kubernetes cluster. Maybe the pod was stuck in the Terminating state, maybe &amp;ldquo;kubectl delete &amp;rdquo; has been returned, but that pod object still exists.
          
          
        
      </description>
    </item>
    
    <item>
      <title>The smallest schedulable unit in Kubernetes — Pod</title>
      <link>https://littledriver.me/post/understand-pod-concept/</link>
      <pubDate>Sun, 01 Dec 2019 21:24:59 +0900</pubDate>
      
      <guid>https://littledriver.me/post/understand-pod-concept/</guid>
      <description>
        
          
            Overview As I have mentioned in the previous blog, lots of technologies the Kubernetes relies on are created with the help of the operating system. For example, the container is the specific process that corporates with the CGroup and Linux Namespace on OS. However, there is another essential OS concept used in Kubernetes: process group. It means one process group includes several processes. Those kinds of processes have a super affinity relationship.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Kubernetes 的基石 — 容器技术</title>
      <link>https://littledriver.me/post/understand-container-technology/</link>
      <pubDate>Sun, 15 Sep 2019 14:24:59 +0900</pubDate>
      
      <guid>https://littledriver.me/post/understand-container-technology/</guid>
      <description>
        
          
            Overview 随着容器技术的诞生和发展，它不再仅仅是一个发布你所开发软件的新姿势，更是在后端开发生态中，慢慢的成为了工程师开发模式的一部分。
容器技术最核心的一个优势，就是抹平了由于开发环境和部署环境的差异导致的部署线上服务困难的问题。任何一个以“容器”，都会被独立发布和部署。并且在“构建”的过程中，可以同时将服务所依赖的“环境”进行打包，从而保证了线上和本地的环境一致，减少部署过程中出现的问题。
除此之外，容器技术的实现借助了 Linux 操作系统中两个比较重要的技术 Namespace 和 Cgroup。前者让某一个容器运行起来之后可以在环境或者说是视图上保持良好的隔离性，后者则让一个容器在使用操作系统提供的资源的时候，与其他容器甚至是宿主机产生良好的隔离。
另外，对于容器技术值得提及的一点就是。虽然它所实现的『隔离性』不及虚拟机提供的那样完善，但它在性能上以及资源占用上表现的要比虚拟机更加优秀。这里说的资源占用是指非容器内部的业务应用所消耗的部分。因为一个容器，本质上就是一个操作系统的进程。
 Image not found  a.warning-link { color: inherit !important; font-weight: inherit !important; text-decoration: underline !important; border-bottom: none !important; }  Web path: https://i.loli.net/2019/09/15/VqiIjNZlhxcatdX.jpg
Disk path: /static/https://i.loli.net/2019/09/15/VqiIjNZlhxcatdX.jpg
Using Page Bundles: false
 不过，在计算机世界中没有绝对的『银弹』。容器技术虽然在性能和资源上更好一些，但是在隔离性的保证上面往往表现的不如虚拟机。这是因为，软件层面上的隔离终究不是彻底的。某些难以隔离的资源，比如 Linux 内核是对所有的容器共享的。所以，使用容器技术带来的一个明显的缺陷，就是我们要额外的考虑很多『安全性』的问题。
隔离技术 容器技术在实现『隔离性』的时候，借助了两项技术，一个为 Namespace，另外一个为 Cgroup。
Namespace 简单来说，Linux Namespace 是一项 Linux 系统提供的进程间的隔离技术。它能够在『视图』层面上对进程的一些信息进行隔离。
在理解 Namespace 的时候，我们可以把整个操作系统默认的空间认为是一个全局的 Namespace。如果不加过多的处理，那么所有的进程都是在这一个 Namespace 下的。他们共享网络设备，共享同一组进程 ID 等等。
根据要隔离的东西的不同，Linux 对 Namespace 进行了分类：Mount Namespace， UTS Namespace，PID Namespace，IPC Namespace，Network Namespace， User Namespace。
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
